#
# Copyright 2019-2020 DJANTA, LLC (https://www.djanta.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed toMap in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Build

# On push event ...
on:
  # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
jobs:
  build:
#    runs-on: ${{ matrix.os }}
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
#        os: [ubuntu-latest]
        arch: [debian, ubuntu]
#        fail-fast: false
#    if: github.event_name == 'push' && startsWith(toJson(github.event.commits), '***NO_CI***') == false && contains(toJson(github.event.commits), '[ci skip]') == false && contains(toJson(github.event.commits), '[skip ci]') == false
    steps:
#      - name: Check Commit Type
#        uses: gsactions/commit-message-checker@v1
#        with:
#          pattern: '\[[^]]+\] .+$'
#          flags: 'gm'
#          error: 'Your first line has to contain a commit type like "[BUGFIX]".'
#      - name: Check Line Length
#        uses: gsactions/commit-message-checker@v1
#        with:
#          pattern: '^[^#].{74}'
#          error: 'The maximum line length of 74 characters is exceeded.'
#      - name: Check for Resolves / Fixes
#        uses: gsactions/commit-message-checker@v1
#        with:
#          pattern: '^.+(Resolves|Fixes): \#[0-9]+$'
#          error: 'You need at least one "Resolves|Fixes: #<issue number>" line.'
      - name : GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
#      - name: get commit message
#        run: |
#          echo ::set-env name=commitmsg::$(git log --format=%B -n 1 ${{ github.event.after }})
      - name: Checking out
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          submodules: true

      - name: Submodules Sync
        shell: bash
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --remote --merge --force --depth=3

      - name: GitHub credentials configuration - ${{ matrix.os }}
        shell: bash
        run: |
          git config user.name "${{ secrets.GH_USER }}"
#          git config user.email "${{ secrets.GH_USER_EMAIL }}"
#          git config credential.helper "store --file=.git/credentials"
#          echo "https://${{ secrets.GITHUB_TOKEN }}:@github.com" > .git/credentials

#      - name: Increment Step Patch
#        id: increment-semver-patch
#        uses: Benbentwo/increment-semver@master
#        with:
#          version-level: '-M'

      - name: Update version
        id: version
        run: |
          echo "GITHUB_REF is a tag you set for the release"
          echo "Your GitHub ref: ${GITHUB_REF}"
          VERSION=`echo "${GITHUB_REF}" | cut -f 3 -d "/"`
          echo "Preparing version: ${VERSION}"
          echo "__version__ = \"${VERSION}\"" > __version__.py
          echo "##[set-output name=version;]$(echo ${VERSION})"

          if [[ steps.version.outputs.version != ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=rversion::$(date -u +'%y.%m')
              echo "==========================="
          fi

      - name: Docker Build Image - ${{ matrix.os }}
        env:
          GH_USER: ${{ secrets.GH_USER }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_USERNAME: ${{ secrets.GH_USER }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

          PROJECT_ID: nuxeo-sdk
          ACCOUNT_ID: djanta
          IMAGE_BASE: $ACCOUNT_ID/$PROJECT_ID
          IMAGE_TAG: $IMAGE_BASE:$VERSION
          GITHUB_IMAGE_TAG: $PROJECT_ID:$VERSION
          GITHUB_IMAGE_BRANCH: $GITHUB_IMAGE_TAG-$TRAVIS_BRANCH
          GITHUB_REGISTRY: docker.pkg.github.com
          GITHUB_SLOG_REGISTRY: $GITHUB_REGISTRY/$GITHUB_REPOSITORY
        run: |
          echo "Refactored version: ${{ steps.version.outputs.rversion }}"
          docker --debug build -t $ACCOUNT_ID/$PROJECT_ID-${{ matrix.arch }} \
            --build-arg BUILD_VERSION=$(date -u +'%y.%m') \
            --build-arg BUILD_HASH=$(git rev-parse HEAD) \
            --build-arg RELEASE_VERSION=$(date -u +'%y.%m') \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --file $(pwd)/dockerfiles/${{ matrix.arch }}/Dockerfile .
          
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "[WIP] - PR after passing develop branch build test"
          committer: GitHub <noreply@github.com>
          author: ${{ github.actor }} ${{ github.pusher.email }}
          title: '[WIP] PR for master merge from ${{ github.ref }} by (${{ github.head_commit.committer.name }}) - https://github.com/${{ github.head_commit.committer.username }}'
          body: |
            New report
            - ${{ github.event.head_commit.message }}
            - Auto-generated by [create-pull-request][1]
            [1]: https://github.com/peter-evans/create-pull-request
          labels: report, automated pr
          assignees: peter-evans
          reviewers: peter-evans
          team-reviewers: owners, maintainers
          milestone: 1
          draft: false
          branch: master
          request-to-parent: false

      - name: Create or Update Project Card
        uses: peter-evans/create-or-update-project-card@v1
        with:
          project-name: Cloud
          column-name: To do
          issue-number: ${{ steps.cpr.outputs.pull-request-number }}