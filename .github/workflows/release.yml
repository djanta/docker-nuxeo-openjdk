#
# Copyright 2019-2020 DJANTA, LLC (https://www.djanta.io)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed toMap in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Release

# On push event ...
on:
  # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches:
      - release
#    tags:
#      - /^((rc|v|version|release|tag)(-)?)?([0-9\.]+)((-)?(patch|beta|alpha))?$/
# Push events to v1 tag

jobs:
  release:
#    if: (startsWith(github.event.head_commit.message, 'prepare release') == false)
    runs-on: ubuntu-latest
    strategy:
      matrix:
#        os: [ubuntu-latest]
    steps:
      - name : GITHUB CONTEXT
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Checking out
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          submodules: true
      - name: Submodules Sync
        shell: bash
        run: |
          git submodule sync --recursive
          git submodule update --init --recursive --remote --merge --force --depth=3
      - name: Gpg initialization
        shell: bash
        run: |
          echo "GnuGpg initialization step ..."
          TMPDIR=${TMPDIR:-$(dirname $(mktemp))}
          KEYSTORE=${KEYSTORE:-$TMPDIR/.keystore}
          IN_PUB=$(pwd)/.gnugp/deploy/pubring.gpg.asc
          IN_PRV=$(pwd)/.gnugp/deploy/secring.gpg.asc
          OUT_PUB=$KEYSTORE/pubring.gpg.enc
          OUT_PRV=$KEYSTORE/secring.gpg.enc
          mkdir -pv $KEYSTORE
          gpg --decrypt --yes --batch --passphrase=${{ secrets.GPG_MASTER_PASSWORD }} --output=$OUT_PUB $IN_PUB
          gpg --decrypt --yes --batch --passphrase=${{ secrets.GPG_MASTER_PASSWORD }} --output=$OUT_PRV $IN_PRV
          gpg --yes --batch --import $OUT_PUB >/dev/null 2>&1;
          gpg --yes --batch --import $OUT_PRV >/dev/null 2>&1;
          rm -rfv $KEYSTORE
      - name: GitHub credentials configuration - (${{ matrix.os }})
        shell: bash
        run: |
          git config user.name "${{ secrets.GH_USER }}"
          git config user.email "${{ secrets.GH_USER_EMAIL }}"
          git config credential.helper "store --file=.git/credentials"
          echo "https://${{ secrets.GH_TOKEN }}:@github.com" > .git/credentials

      - name: Update or Create version ID
        id: version
        run: |
          echo "GITHUB_REF is a tag you set for the release"
          echo "Your GitHub ref: ${GITHUB_REF}"
          VERSION=`echo "${GITHUB_REF}" | cut -f 3 -d "/"`
          echo "Preparing version: ${VERSION}"
          echo "__version__ = \"${VERSION}\"" > __version__.py
          echo "##[set-output name=version;]$(echo ${VERSION})"

          if [[ steps.version.outputs.version != ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo ::set-output name=rversion::$(date -u +'%y.%m')
          fi
      - name: Create & Release To (Github Registry & Docker Hub)
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GH_USER: ${{ secrets.GH_USER }}
          GITHUB_USERNAME: ${{ secrets.GH_USER }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "========"

#      - name: Create Github Release
#        id: create_release
#        uses: actions/create-release@latest
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#        with:
#          tag_name: ${{ steps.increment-semver-patch.outputs.version }}
#          release_name: Release v${{ steps.increment-semver-patch.outputs.version }}
#          body: |
#            #### Changes in this Release:
#            ${{ steps.changelog.outputs.CHANGELOG }}
#          draft: false
#          prerelease: false
