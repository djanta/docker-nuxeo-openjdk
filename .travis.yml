dist: xenial
sudo: required

python:
  - '3.6'

services:
  - docker

cache:
  directories:
#    - $HOME/.m2

env:
  - VERSION=8
  - VERSION=8 VARIANT=jdk
  - VERSION=9
  - VERSION=9 VARIANT=jdk

#jdk:
#  - openjdk8

# before install any component
before_install:
  # Parameters used during release
  - git config user.name "$GH_USER"
  - git config user.email "$GH_USER_EMAIL"

  # setup https authentication credentials, used by ./mvnw release:prepare
  - git config credential.helper "store --file=.git/credentials"
  - echo "https://$GH_TOKEN:@github.com" > .git/credentials

  # Update all git submodule (No need this manual submodule update ...)
  ##- git submodule init && git submodule update --init --recursive --remote --merge

# Install any required components
install:
  - git clone https://github.com/docker-library/official-images.git ~/official-images

before_script:
  - env | sort
  - cd "dockerfiles/$VERSION"
  - IMAGE_BASE="${ACCOUNT_ID:-djantaio}/nuxeo-openjdk"
  - IMAGE_TAG="${IMAGE_BASE}:$VERSION-$VARIANT"
  - IMAGE_BRANCH="${IMAGE_BASE}:$VERSION-$VARIANT-${TRAVIS_BRANCH}"

  # Making sure we login ...
  - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"

# When successfully built
after_success:
  - echo "Running after success ..."

# Don't build release tags. This avoids publish conflicts because the version commit exists both on master and the release tag.
# See https://github.com/travis-ci/travis-ci/issues/1532
branches:
  except:
    - /^[0-9]/

# safelist
  only:
    - master
    - develop
    - release

jobs:
  include:
    - stage: develop
      name: "Build and Unit Testing the develop & PR branch"
      if: (branch = develop AND type != pull_request) AND commit_message !~ /^(prepare release ([0-9\.]+))$/
#      jdk: openjdk8
      install: true
      before_deploy:
        #- TRAVIS_TAG=build-$TRAVIS_BUILD_NUMBER
        #- git_sha="$(git rev-parse --short HEAD)"
        - docker tag "${IMAGE_BASE}" "${IMAGE_BRANCH}"
        #- docker tag "${IMAGE_BASE}" "${IMAGE_BASE}:${git_sha}-develop"
      script:
        - docker build -t "${IMAGE_BASE}" . #--file "Dockerfile-${VARIANT}"
        - ~/official-images/test/run.sh "${IMAGE_TAG}"
      after_script:
        - docker images
      deploy:
        provider: script
        script: docker push "${IMAGE_BASE}:${IMAGE_BRANCH}" #&& docker push "${IMAGE_NAME}:${git_sha}-develop"
        on:
          branch: develop

    - stage: snapshot
      name: "Deploy Snapshot to Maven repo"
      if: branch = master AND type != pull_request AND commit_message !~ /^(prepare release ([0-9\.]+))$/
#      jdk: openjdk8
      install: true
      script:
        - echo "Not Yet Implemented ..."

    - stage: release
      name: "Release to OSS SonaType"
      if: tag =~ /^[0-9\.]+$/
#      jdk: openjdk8
      install: true
      script:
        - echo "Not Yet Implemented ..."

notifications:
  email:
    recipients:
      - "$GH_USER_EMAIL"
    on_success: change  # default: change
    on_failure: always  # default: always

# vim:set et ts=2 sw=2:
